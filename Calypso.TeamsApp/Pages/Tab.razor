@page "/tab"
@using Microsoft.Extensions.Configuration
@using System.IO
@using System.Text.Json
@using Calypso.TeamsApp.Models
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager NavManager
@*<div class="welcome page">
        <div class="narrow page-padding">
            <img src="hello.png" />
            <h1 class="center">
                Congratulations@(!String.IsNullOrEmpty(UserName) ? ", " + UserName : "")!
            </h1>
            @if (!IsLoading)
            {
            }
            else if (IsLoading)
            {
                <FluentProgressRing class="center" />
            }

            <div class="sections">

            </div>

        </div>
    </div>*@


<h1>Feedbacks</h1>

@if (_feedbacks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table id="items" class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Description</th>
                <th>Status</th>
                <th>Subject</th>
                <th>Machine</th>
                <th>Location</th>
                <th>Reporter</th>
                <th>Role</th>
                <th>Date</th>
                <th>Sbu</th>
                <th>Project name</th>
                <th>Product name</th>
                <th>Factory</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var feedback in _feedbacks)
            {
                <tr>
                    <td>@feedback.Number</td>
                    <td>@feedback.Description</td>
                    <td>@feedback.Status</td>
                    <td>@feedback.Subject</td>
                    <td>@feedback.Machine</td>
                    <td>@feedback.Location</td>
                    <td>@feedback.Reporter</td>
                    <td>@feedback.Role</td>
                    <td>@feedback.Date</td>
                    <td>@feedback.Sbu</td>
                    <td>@feedback.ProjectName</td>
                    <td>@feedback.ProductName</td>
                    <td>@feedback.Factory</td>
                    <td>
                        <button @onclick="@(_=> Details(feedback.RowKey))">
                            Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <style>
        #items {
            font-family: Arial, Helvetica, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

            #items td, #items th {
                border: 1px solid #ddd;
                padding: 8px;
            }

            #items tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            #items tr:hover {
                background-color: #ddd;
            }

            #items th {
                padding-top: 12px;
                padding-bottom: 12px;
                text-align: left;
                background-color: black;
                color: white;
            }
    </style>
}
@code {
    //TeamsFx teamsfx;
    //string _clientId, _endpoint;

    //public string UserName { get; set; }
    //public string Email { get; set; }
    //public string Title { get; set; }
    //public string UserPhotoUri { get; set; }
    //public bool IsLoading { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    try
    //    {
    //        if (firstRender)
    //        {
    //            teamsfx = await TeamsFx.CreateTeamsFx(jsRuntime);
    //            _clientId = Configuration.GetValue<string>("CLIENT_ID");
    //            _endpoint = NavManager.BaseUri;

    //            await teamsfx.Init(_clientId, _endpoint, _endpoint);

    //            var user = await teamsfx.GetInfoAsync();

    //            UserName = user.DisplayName;

    //            StateHasChanged();
    //        }
    //    }
    //    catch (Exception) { }
    //}


    private void Details(string rowKey)
    {
        NavManager.NavigateTo($"/feedback/{rowKey}");
    }

    private IEnumerable<Feedback> _feedbacks;

    protected override async Task OnInitializedAsync()
    {
        var requestUri = new Uri("http://localhost:5000/api/Feedback?pageNumber=1&itemsPerPage=10");
        var response = await Http.GetAsync(requestUri);
        var content = await response.Content.ReadAsStringAsync();
        var pagedResult = JsonSerializer.Deserialize<PagedResult>(content, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });
        _feedbacks = pagedResult.Items;
    }
}
